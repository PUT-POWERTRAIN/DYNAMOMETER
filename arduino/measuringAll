// PUT POWERTRAIN 2024
// DRONE DYNAMOMETER PROGRAM
// DESIGNED FOR ARDUINO GIGA R1 MAINCORE

//LIBRARIES
#include <string>

//WI-FI
//const char* ssid = "TP-Link_33DD";  //WI-FI NAME
//const char* pass = "03215111";      //PASSWORD
//WiFiServer server(12345);           //CONNECTION PORT

//SENSORS DEFINITION
//IR SENSORS
#define IR_SENSOR_M1 1
#define IR_SENSOR_M2 2
#define IR_SENSOR_M3 3
#define IR_SENSOR_M4 4
//TEMPERATURE SENSORS (LM35DZ)
#define TEMP_SENSOR_AMBIENT A2
#define TEMP_SENSOR_BATTERY A4
//CURRENT SENSORS
#define CURRENT_SENSOR_M1 A8
#define CURRENT_SENSOR_M2 A9
#define CURRENT_SENSOR_M3 A10
#define CURRENT_SENSOR_M4 A11
//VOLTAGE
#define VOLTAGE_SENSOR A6


//VARIABLES
//FREQUENCY OF MEASURE
const int measuring_frequency = 100;
//FREQUENCY OF RPM COUNTING, HOW OFTEN THE RPM IS MEASURED BY MEASURING FREQUENCIES
const int rpm_counting_frequency = 5;
unsigned long prevTime = 0;
//IR SENSOR INTERRUPTIONS COUNT
volatile unsigned int count_m1 = 0;
volatile unsigned int count_m2 = 0;
volatile unsigned int count_m3 = 0;
volatile unsigned int count_m4 = 0;
//RPM COUNT
volatile float rpm_m1=0;
volatile float rpm_m2=0;
volatile float rpm_m3=0;
volatile float rpm_m4=0;
//CURRENT VALUES
volatile float current_m1 = 0;
volatile float current_m2 = 0;
volatile float current_m3 = 0;
volatile float current_m4 = 0;
//TEMPERATURE VALUES
volatile float ambient_temperature = 0;
volatile float battery_temperature = 0;
//VOLTAGE VALUE
volatile float voltage = 0;
//LOOP
volatile int loop_iterations=0;


void setup() {
  Serial.begin(115200);
  /* WiFi.begin(ssid, pass); 

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  server.begin();
  */

  //STARTING INTERRUPTS FROM IR SENSORS
  attachInterrupt(digitalPinToInterrupt(IR_SENSOR_M1), interruption_counting_m1, FALLING);
  attachInterrupt(digitalPinToInterrupt(IR_SENSOR_M2), interruption_counting_m2, FALLING);
  attachInterrupt(digitalPinToInterrupt(IR_SENSOR_M3), interruption_counting_m3, FALLING);
  attachInterrupt(digitalPinToInterrupt(IR_SENSOR_M4), interruption_counting_m4, FALLING);
}

//SENDING FUNCTION
void SendToApp(WiFiClient client)
{
  char buffer[10000]; // UtwÃ³rz bufor o odpowiednim rozmiarze
  sprintf(buffer, "*%d;%d;%d;%d;%.2f;%.2f;%.2f;%.2f;%.2f;%.2f;%d;%d#", rpm_m1, rpm_m2, rpm_m3, rpm_m4, current_m1, current_m2, current_m3, current_4, ambient_temperature, battery_temperature, voltage);
  client.print(buffer);
}

//COUNTING INTERRUPTIONS FUNCTIONS
void interruption_counting_m1() {
  noInterrupts();
  count_m1 = count_m1 + 1;
  interrupts();
}
void interruption_counting_m2() {
  noInterrupts();
  count_m2 = count_m2 + 1;
  interrupts();
}
void interruption_counting_m3() {
  noInterrupts();
  count_m3 = count_m3 + 1;
  interrupts();
}
void interruption_counting_m4() {
  noInterrupts();
  count_m4 = count_m4 + 1;
  interrupts();
}

//SERIAL PRINT VALUES
void SensorsSerialPrint()
{
  Serial.print("RPM1 M1");
  Serial.print(rpm_m1);
  Serial.print("RPM M2: ");
  Serial.print(rpm_m2);
  Serial.print("RPM M3: ");
  Serial.print(rpm_m3);
  Serial.print("RPM M4: ");
  Serial.print(rpm_m4);
  Serial.print("CURRENT M1: ");
  Serial.print(current_m1);
  Serial.print("CURRENT M2: ");
  Serial.print(current_m2);
  Serial.print("CURRENT M3: ");
  Serial.print(current_m3);
  Serial.print("CURRENT M4: ");
  Serial.print(current_m4);
  Serial.print("AMBIENT TEMPERATURE: ");
  Serial.print(ambient_temperature);
  Serial.print("BATTERY TEMPERATURE: ");
  Serial.print(battery_temperature);
  Serial.print("VOLTAGE: ");
  Serial.println(voltage);
}

//MAIN LOOP
void loop() 
{
      unsigned long currentTime = millis();
      unsigned long elapsedTime = currentTime - prevTime;
      
      if (elapsedTime >= measuring_frequency) 
      {
        if (loop_iterations = rpm_counting_frequency)
        {
          rpm_m1 = (count_m1) * (60000.0 / elapsedTime); // Calculate RPM
          rpm_m2 = (count_m2) * (60000.0 / elapsedTime); // Calculate RPM
          rpm_m3 = (count_m3) * (60000.0 / elapsedTime); // Calculate RPM
          rpm_m4 = (count_m4) * (60000.0 / elapsedTime); // Calculate RPM
          Serial.print("LICZENIE RPM");
          count_m1 = 0;
          count_m2 = 0;
          count_m3 = 0;
          count_m4 = 0;
        }

        //CURRENT SENSING
        current_m1 = analogRead(CURRENT_SENSOR_M1);
        current_m2 = analogRead(CURRENT_SENSOR_M2);
        current_m3 = analogRead(CURRENT_SENSOR_M3);
        current_m4 = analogRead(CURRENT_SENSOR_M4);

        //TEMPERAUTRE SENSING
        ambient_temperature = analogRead(TEMP_SENSOR_AMBIENT);
        battery_temperature = analogRead(TEMP_SENSOR_BATTERY);

        //VOLTAGE SENSING
        voltage = analogRead(VOLTAGE_SENSOR);

        prevTime = currentTime; // Update previous time
        Serial.print("LOOP");
        SensorsSerialPrint();
        //SendToApp(client, 1000, int(rpm2) , int(rpm3), 1000, 10,10,10,10);
        loop_iterations = loop_iterations + 1;
        delay(1);
      }
}
