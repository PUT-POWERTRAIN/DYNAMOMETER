#include <WiFi.h>
#include <WiFiUdp.h>
#include <Servo.h>

const char *ssid = "TP-Link_33DD";
const char *password = "03215111";

WiFiUDP udp;
unsigned int localUdpPort = 12345;  // Port UDP
char packetBuffer[255];  // Bufor dla danych UDP

int pwmPin1 = 5;  // Pin PWM dla silnika 1
int pwmPin2 = 6;  // Pin PWM dla silnika 2
int pwmPin3 = 9;  // Pin PWM dla silnika 3
int pwmPin4 = 11;  // Pin PWM dla silnika 4

Servo esc1;
Servo esc2;
Servo esc3;
Servo esc4;

int pwmValue1 = 0;  // Wartość sygnału PWM dla silnika 1

void setup() {
  Serial.begin(115200);
  
  // Inicjalizacja WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Inicjalizacja komunikacji UDP
  udp.begin(localUdpPort);
  Serial.print("UDP server started at port ");
  Serial.println(localUdpPort);

  // Inicjalizacja pinów ESC
  esc1.attach(pwmPin1);
  esc2.attach(pwmPin2);
  esc3.attach(pwmPin3);
  esc4.attach(pwmPin4);
}

void loop() {
  int packetSize = udp.parsePacket();
  if (packetSize) {
    // Odbierz pakiet UDP
    int len = udp.read(packetBuffer, 255);
    if (len > 0) {
      packetBuffer[len] = 0;
      Serial.print("Received packet: ");
      Serial.println(packetBuffer);
      
      // Odczytaj wartość sygnału PWM dla silnika 1
      sscanf(packetBuffer, "%d", &pwmValue1);
      Serial.print("PWM value: ");
      Serial.println(pwmValue1);
    }
  }

  // Ustaw wartości sygnałów PWM na silnikach
  esc1.writeMicroseconds(pwmValue1);
  esc2.writeMicroseconds(pwmValue1);
  esc3.writeMicroseconds(pwmValue1);
  esc4.writeMicroseconds(pwmValue1);

  // Wywołaj funkcję yield() w celu umożliwienia obsługi innych zadań, w tym odbierania danych przez WiFi
  yield();
}
